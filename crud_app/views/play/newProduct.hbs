<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="Cache-control" content="no-cache">
  <title>Document</title>
  <script src="/modalCropper/jquery-3.1.1.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-+0n0xVW2eSR5OomGNYDnhzAbDsOXxcvSN1TPprVMTNDbiYZCxYbOOl7+AMvyTG2x" crossorigin="anonymous">
</head>
<style>
  /*Copied from bootstrap to handle input file multiple*/
  .btn {
    display: inline-block;
    padding: 6px 12px;
    margin-bottom: 0;
    font-size: 14px;
    font-weight: normal;
    line-height: 1.42857143;
    text-align: center;
    white-space: nowrap;
    vertical-align: middle;
    cursor: pointer;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    background-image: none;
    border: 1px solid transparent;
    border-radius: 4px;
  }

  /*Also */
  .btn-success {
    border: 1px solid #c5dbec;
    background: #d0e5f5;
    font-weight: bold;
    color: #2e6e9e;
  }

  /* This is copied from https://github.com/blueimp/jQuery-File-Upload/blob/master/css/jquery.fileupload.css */
  .fileinput-button {
    position: relative;
    overflow: hidden;
  }

  .fileinput-button input {
    position: absolute;
    top: 0;
    right: 0;
    margin: 0;
    opacity: 0;
    -ms-filter: "alpha(opacity=0)";
    font-size: 200px;
    direction: ltr;
    cursor: pointer;
  }

  .thumb {
    height: 80px;
    width: 100px;
    border: 1px solid #000;
  }

  ul.thumb-Images li {
    width: 120px;
    float: left;
    display: inline-block;
    vertical-align: top;
    height: 120px;
  }

  .img-wrap {
    position: relative;
    display: inline-block;
    font-size: 0;
  }

  .img-wrap .close {
    position: absolute;
    top: 2px;
    right: 2px;
    z-index: 100;
    background-color: #d0e5f5;
    padding: 5px 2px 2px;
    color: #000;
    font-weight: bolder;
    cursor: pointer;
    opacity: 0.5;
    font-size: 23px;
    line-height: 10px;
    border-radius: 50%;
  }

  .img-wrap:hover .close {
    opacity: 1;
    background-color: #ff0000;
  }

  .FileNameCaptionStyle {
    font-size: 12px;
  }
</style>

<body>
  <div class="card card-body">
    <form>

      <div class="form-floating">
        <input type="text" class="form-control{{#if error.title }} is-invalid{{/if}}" id="title" placeholder="title"
          name="title" value="{{#if value.title}} {{value.title}}{{/if}}">
        <label for="title">Title</label>
        <div class="invalid-feedback">
          {{error.title}}
        </div>
      </div>

      <div class="form-floating">
        <input type="text" maxlength='250' id="description" name="description" class="form-control"
          placeholder="description" style="width: 100%;height: 100px;">
        <label for="description">Description</label>
      </div>


      <div class="form-floating">
        <input type="price" class="form-control{{#if error.price }} is-invalid{{/if}}" id="price" placeholder="price"
          name="number" value="{{#if value.price}} {{value.price}}{{/if}}">
        <label for="price">Price</label>
        <div class="invalid-feedback">
          {{error.price}}
        </div>
      </div>

    </form>

  </div>
  <div>
    <label style="font-size: 14px;">
      <span style='color:navy;font-weight:bold'>Attachment Instructions :</span>
    </label>
    <ul>
      <li>
        Allowed only files with extension (jpg, png, gif)
      </li>
      <li>
        Maximum number of allowed files 10 with 300 KB for each
      </li>
      <li>
        you can select files from different folders
      </li>
    </ul>
    <!--To give the control a modern look, I have applied a stylesheet in the parent span.-->
    <form id="theform" enctype="multipart/form-data">
      <span class="btn btn-success fileinput-button">
        <span>Select Attachment</span>
        <input type="file" name="photos[]" id="files" multiple accept="image/jpeg, image/png, image/gif," required ><br />
      </span>
      <input type="submit" value="submit">
    </form>
    <output id="Filelist"></output>
  </div>
</body>
<script>
    //action="/u/uploadfile" 
    //var cit= {{{toJSON city}}}
    //console.log((cit))
    //var a=["ole"]
    //a=a.concat(cit)
    //console.log(a)



</script>
<script>
  //I added event handler for the file upload control to access the files properties.
  document.addEventListener("DOMContentLoaded", init, false);

  //To save an array of attachments
  var AttachmentArray = [];

  //counter for attachment array
  var arrCounter = 0;

  //to make sure the error message for number of files will be shown only one time.
  var filesCounterAlertStatus = false;

  //un ordered list to keep attachments thumbnails
  var ul = document.createElement("ul");
  ul.className = "thumb-Images";
  ul.id = "imgList";

  function init() {
    //add javascript handlers for the file upload event
    document
      .querySelector("#files")
      .addEventListener("change", handleFileSelect, false);
  }

  //the handler for file upload event
  function handleFileSelect(e) {
    //to make sure the user select file/files
    if (!e.target.files) return;

    //To obtaine a File reference
    var files = e.target.files;

    // Loop through the FileList and then to render image files as thumbnails.
    for (var i = 0, f; (f = files[i]); i++) {
      //instantiate a FileReader object to read its contents into memory
      var fileReader = new FileReader();

      // Closure to capture the file information and apply validation.
      fileReader.onload = (function (readerEvt) {
        return function (e) {
          //Apply the validation rules for attachments upload
          ApplyFileValidationRules(readerEvt);

          //Render attachments thumbnails.
          RenderThumbnail(e, readerEvt);

          //Fill the array of attachment
          FillAttachmentArray(e, readerEvt);
        };
      })(f);

      // Read in the image file as a data URL.
      // readAsDataURL: The result property will contain the file/blob's data encoded as a data URL.
      // More info about Data URI scheme https://en.wikipedia.org/wiki/Data_URI_scheme
      fileReader.readAsDataURL(f);
    }
    document
      .getElementById("files")
      .addEventListener("change", handleFileSelect, false);
  }

  //To remove attachment once user click on x button
  jQuery(function ($) {
    $("div").on("click", ".img-wrap .close", function () {
      var id = $(this)
        .closest(".img-wrap")
        .find("img")
        .data("id")

      //to remove the deleted item from array
      var elementPos = AttachmentArray.map(function (x) {
        return x.FileName;
      }).indexOf(id);
      if (elementPos !== -1) {
        AttachmentArray.splice(elementPos, 1);
      }
      console.log((AttachmentArray))

      //to remove image tag
      $(this)
        .parent()
        .find("img")
        .not()
        .remove();

      //to remove div tag that contain the image
      $(this)
        .parent()
        .find("div")
        .not()
        .remove();

      //to remove div tag that contain caption name
      $(this)
        .parent()
        .parent()
        .find("div")
        .not()
        .remove();

      //to remove li tag
      var lis = document.querySelectorAll("#imgList li");
      for (var i = 0; (li = lis[i]); i++) {
        if (li.innerHTML == "") {
          li.parentNode.removeChild(li);
        }
      }
    });
  });

  $("#theform").submit(function (e) {
    // prevent the form from submitting
    e.preventDefault();

    var title = document.getElementById("title").value
    var price = document.getElementById("price").value
    var description = document.getElementById("description").value
    //var fd = new FormData();
    //fd.append("files",JSON.stringify(AttachmentArray))
    $.ajax({
      url: '/post/create',
      type: 'POST',
      contentType: "application/json",
      processData: false,
      // pass the form in the FormData constructor to send all the data inside the form
      //data: new FormData(this),
      data: JSON.stringify({
        "title": title,
        "description": description,
        "price": price,
        "image": AttachmentArray.filter(function () { return true })
      }),
      success: function (result) {
        //window.location.replace(result)
        window.location.href=window.location.origin+result
        //alert(result);
      },
      error: function (xhr, result, errorThrown) {
        console.log("jkjkjk", AttachmentArray)
        //console.log(data)
        alert('Request failed.');
      }
    });
    $('#picture').val('');
    $('#body').val('');
  });

  //Apply the validation rules for attachments upload
  function ApplyFileValidationRules(readerEvt) {
    //To check file type according to upload conditions
    if (CheckFileType(readerEvt.type) == false) {
      alert(
        "The file (" +
        readerEvt.name +
        ") does not match the upload conditions, You can only upload jpg/png/gif files"
      );
      e.preventDefault();
      return;
    }

    //To check file Size according to upload conditions
    if (CheckFileSize(readerEvt.size) == false) {
      alert(
        "The file (" +
        readerEvt.name +
        ") does not match the upload conditions, The maximum file size for uploads should not exceed 300 KB"
      );
      e.preventDefault();
      return;
    }

    //To check files count according to upload conditions
    if (CheckFilesCount(AttachmentArray) == false) {
      if (!filesCounterAlertStatus) {
        filesCounterAlertStatus = true;
        alert(
          "You have added more than 10 files. According to upload conditions you can upload 10 files maximum"
        );
      }
      e.preventDefault();
      return;
    }
  }

  //To check file type according to upload conditions
  function CheckFileType(fileType) {
    if (fileType == "image/jpeg") {
      return true;
    } else if (fileType == "image/png") {
      return true;
    } else if (fileType == "image/gif") {
      return true;
    } else {
      return false;
    }
    return true;
  }

  //To check file Size according to upload conditions
  function CheckFileSize(fileSize) {
    if (fileSize < 300000) {
      return true;
    } else {
      console.log(("me", AttachmentArray))
      return false;
    }
    return true;
  }

  //To check files count according to upload conditions
  function CheckFilesCount(AttachmentArray) {
    //Since AttachmentArray.length return the next available index in the array,
    //I have used the loop to get the real length
    var len = 0;
    for (var i = 0; i < AttachmentArray.length; i++) {
      if (AttachmentArray[i] !== undefined) {
        len++;
      }
    }
    //To check the length does not exceed 10 files maximum
    if (len > 9) {
      return false;
    } else {
      return true;
    }
  }

  //Render attachments thumbnails.
  function RenderThumbnail(e, readerEvt) {
    var li = document.createElement("li");
    ul.appendChild(li);
    li.innerHTML = [
      '<div class="img-wrap"> <span class="close">&times;</span>' +
      '<img class="thumb" src="',
      e.target.result,
      '" title="',
      escape(readerEvt.name),
      '" data-id="',
      readerEvt.name,
      '"/>' + "</div>"
    ].join("");

    var div = document.createElement("div");
    div.className = "FileNameCaptionStyle";
    li.appendChild(div);
    div.innerHTML = [readerEvt.name].join("");
    document.getElementById("Filelist").insertBefore(ul, null);
  }

  //Fill the array of attachment
  function FillAttachmentArray(e, readerEvt) {
    AttachmentArray[arrCounter] = {
      AttachmentType: 1,
      ObjectType: 1,
      FileName: readerEvt.name,
      FileDescription: "Attachment",
      NoteText: "",
      MimeType: readerEvt.type,
      Content: e.target.result.split("base64,")[1],
      FileSizeInBytes: readerEvt.size
    };
    arrCounter = arrCounter + 1;
  }

</script>

</html>